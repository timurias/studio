// Auto-generated by Firebase Studio.
'use server';

/**
 * @fileOverview Automatically detects points on uploaded images using AI to assist with homography calculation.
 *
 * - autoDetectPoints - A function that handles the automatic point detection process.
 * - AutoDetectPointsInput - The input type for the autoDetectPoints function.
 * - AutoDetectPointsOutput - The return type for the autoDetectPoints function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AutoDetectPointsInputSchema = z.object({
  image1DataUri: z
    .string()
    .describe(
      "The first image as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  image2DataUri: z
    .string()
    .describe(
      "The second image as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type AutoDetectPointsInput = z.infer<typeof AutoDetectPointsInputSchema>;

const AutoDetectPointsOutputSchema = z.object({
  image1Points: z.array(z.array(z.number())).describe('The coordinates of detected points on the first image.'),
  image2Points: z.array(z.array(z.number())).describe('The coordinates of detected points on the second image.'),
});
export type AutoDetectPointsOutput = z.infer<typeof AutoDetectPointsOutputSchema>;

export async function autoDetectPoints(input: AutoDetectPointsInput): Promise<AutoDetectPointsOutput> {
  return autoDetectPointsFlow(input);
}

const autoDetectPointsPrompt = ai.definePrompt({
  name: 'autoDetectPointsPrompt',
  input: {schema: AutoDetectPointsInputSchema},
  output: {schema: AutoDetectPointsOutputSchema},
  prompt: `You are an AI assistant designed to automatically detect key points in two images for homography calculation.
  Your goal is to identify and return a set of corresponding points from both images, focusing on corners and distinctive features.
  Prioritize the image with more detailed information by identifying more points on that image.
  Return two arrays of point coordinates, each inner array represents a point with x and y coordinates.

  Image 1: {{media url=image1DataUri}}
  Image 2: {{media url=image2DataUri}}`,
});

const autoDetectPointsFlow = ai.defineFlow(
  {
    name: 'autoDetectPointsFlow',
    inputSchema: AutoDetectPointsInputSchema,
    outputSchema: AutoDetectPointsOutputSchema,
  },
  async input => {
    const {output} = await autoDetectPointsPrompt(input);
    return output!;
  }
);
